// 数据结构大作业（最短路径算法）.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
#include <windows.h>
#include <queue>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <map>
#include <vector>
#include <locale>
#include <codecvt>

using namespace std;

#define MAX 9999 // 定义一个很大的数值，表示两点之间没有直接路径
#define MAXVertex 100 // 图中允许的最大顶点数量

// 图的邻接矩阵存储表示
typedef struct
{
    int n; // 图的顶点个数
    string vexs[MAXVertex]; // 顶点信息，直接存储顶点名字
    float arcs[MAXVertex][MAXVertex]; // 邻接矩阵，用于存储边权值
} GraphMatrix;

// 存储迪杰斯特拉算法中的路径信息
typedef struct
{
    string vertex; // 顶点信息
    float length; // 最短路径长度
    int prevex; // 该顶点的前驱顶点索引
} Path;

//以二维数组来记录所有路径信息
Path dist[MAXVertex][MAXVertex];

// 判断某顶点是否已在最短路径集合中的布尔数组
bool S[MAXVertex][MAXVertex];

// 初始化迪杰斯特拉算法的辅助数据结构
void init(GraphMatrix graph, int start)
{
    int i;
    dist[start][start].length = 0; // 源点到自己的距离为0
    dist[start][start].prevex = 0; // 源点没有前驱
    dist[start][start].vertex = graph.vexs[start]; // 源点的信息
    S[start][start] = true; // 源点加入最短路径集合

    // 初始化其他顶点到源点的距离
    for (i = 0; i < graph.n; i++)
    {
        if (i != start) {
            dist[start][i].length = graph.arcs[start][i]; // 初始距离为邻接矩阵中的值
            dist[start][i].vertex = graph.vexs[i]; // 顶点信息
            if (dist[start][i].length != MAX)
                dist[start][i].prevex = start; // 如果有路径，则前驱为源点
            else
                dist[start][i].prevex = -1; // 否则前驱不存在
        }
        
    }
}

// 初始化图的邻接矩阵表示
void initgraph(GraphMatrix& graph, int length)
{
    int i, j;
    map<string, int> point_map; // 点名与索引的映射表
    ifstream points_file("C:\\Users\\Y1957\\Desktop\\points.csv"); // 读取点文件
    ifstream path_file("C:\\Users\\Y1957\\Desktop\\paths.csv"); // 读取路径文件
    string line, name, from, to;
    float distance;

    // 初始化邻接矩阵中的边信息
    for (i = 0; i < graph.n; i++)
        for (j = 0; j < graph.n; j++)
            graph.arcs[i][j] = (i == j ? 0 : MAX); // 自环边为0，其它默认无穷大

    // 读取点信息文件并构建点名到索引的映射
    if (points_file.is_open())
    {
        getline(points_file, line); // 跳过表头
        while (getline(points_file, line))
        {
            stringstream ss(line);
            getline(ss, name, ','); // 读取点名
            ss >> i; // 读取点ID
            point_map[name] = i - 1; // 点名映射到索引，索引从0开始
            graph.vexs[i - 1] = name;// 直接存储点名
        }
        points_file.close();
    }
    else
    {
        cerr << "Failed to open points.csv" << endl;
        exit(EXIT_FAILURE);
    }

    // 读取路径信息文件并填充邻接矩阵
    if (path_file.is_open())
    {
        getline(path_file, line); // 跳过表头
        while (getline(path_file, line))
        {
            stringstream ss(line);
            getline(ss, from, '-'); // 起点
            getline(ss, to, ','); // 终点
            ss >> distance; // 距离

            if (point_map.find(from) != point_map.end() && point_map.find(to) != point_map.end())
            {
                int u = point_map[from]; // 起点索引
                int v = point_map[to]; // 终点索引
                graph.arcs[u][v] = distance;
                graph.arcs[v][u] = distance;// 设置边的权值
            }
            else
            {
                cerr << "Error in path data: " << from << " or " << to << " not found in points.csv" << endl;
                exit(EXIT_FAILURE);
            }
        }
        path_file.close();
    }
    else
    {
        cerr << "Failed to open path.csv" << endl;
        exit(EXIT_FAILURE);
    }

    graph.n = point_map.size(); // 设置图的顶点数量
}

// 在此实现迪杰斯特拉算法计算最短路径
void dijkstra(GraphMatrix& graph, int start)
{
    int i, j, k;
    float min;

    // 初始化
    init(graph, start);

    // Dijkstra 算法主循环
    for (i = 1; i < graph.n; i++) 
    {
        // 找出未处理的最短路径顶点
        min = MAX;
        for (j = 0; j < graph.n; j++)
        {
            if (!S[start][j] && dist[start][j].length < min)
            {
                min = dist[start][j].length;
                k = j;
            }
        }

        // 将当前顶点k加入最短路径集合
        S[start][k] = true;

        // 更新与当前顶点k相邻的未处理顶点的路径信息
        for (j = 0; j < graph.n; j++)
        {
            if (!S[start][j] && graph.arcs[k][j] != MAX && dist[start][k].length + graph.arcs[k][j] < dist[start][j].length)
            {
                dist[start][j].length = dist[start][k].length + graph.arcs[k][j];
                dist[start][j].prevex = k;
            }
        }
    }
}

// 打印最短路径的辅助函数
void printPathDFS(int vertex, GraphMatrix& graph, int start)
{
    // 如果当前顶点不是起点，则继续递归打印前驱顶点
    if (vertex != start)
    {
        printPathDFS(dist[start][vertex].prevex, graph, start); 
    }

    // 打印当前顶点
    cout << graph.vexs[vertex] << " ";
}

// 遍历打印从源点到所有其他点的最短路径
void printAllShortestPath(GraphMatrix& graph)
{
    cout << "Input the source point ID and calculate the minimum distance between all points: " << endl;
    int start;
    cin>>start;
    int n = start;

    for (int i = 0; i < graph.n; i++)
    {
        cout << "From " << graph.vexs[start] << " to " << graph.vexs[n] << " : ";
        if (dist[start][n].length == MAX)
        {
            cout << "No path" << endl;
        }
        else
        {
            cout << "Length = " << dist[start][n].length << ", Path = ";
            // 调用打印函数
            printPathDFS(n, graph, start);
            cout << endl;
        }
        n++;
        n = n % 10;
    }
}

// 打印从起点到终点的最短路径
void printShortestPathDFS( GraphMatrix& graph) {
    int S, E;
    cout << "Input the target point ID and calculate the minimum distance between the two points:" << endl;
    cout << "imput start: ";
    cin >> S;
    cout << "imput end: ";
    cin >> E;
  
    cout << "From " << dist[S][S].vertex << " to " << dist[E][E].vertex << " : ";
     
        if (dist[S][E].length == MAX)
        {
            cout << "No path" << endl;
        }
        else
        {
            cout << "Length = " << dist[S][E].length << ", Path = ";
            // 调用打印函数
            printPathDFS(E, graph, S);
            cout << endl;
        }
    
}



void BFS(GraphMatrix& graph, int start) {
    vector<bool> visited(graph.n, false);  // 记录每个顶点是否被访问
    queue<int> q;  // 使用队列进行BFS

   
    visited[start] = true;  // 标记起始顶点为已访问
    q.push(start);  // 将起始顶点加入队列

    
    cout << "BFS Traversal starting from vertex " << graph.vexs[start] << ": " << endl;

    while (!q.empty()) {
        int v = q.front();  // 获取队列头部元素
        q.pop();  // 出队
      
        // 遍历所有邻接节点
        for (int i = 0; i < graph.n; i++) {
            // 如果顶点v和i之间有边，并且i还没有被访问
            if (graph.arcs[v][i] != MAX && !visited[i]) {
                // 打印路径
                cout << "From " << graph.vexs[start] << " to " << graph.vexs[i] << " : ";
                if (dist[start][i].length == MAX)
                {
                    cout << "No path" << endl;
                }
                else
                {
                    cout << "Length = " << dist[start][i].length << ", Path = ";
                    // 调用打印函数
                    printPathDFS(i, graph, start);
                    cout << endl;
                }

                visited[i] = true;  // 标记i为已访问
                q.push(i);  // 将i加入队列
            }
        }
    }
    cout << endl;
}
int main()
{
    SetConsoleOutputCP(CP_UTF8);

    GraphMatrix graph;
    graph.n = 10; // 假设顶点数量为10

    // 初始化图
    initgraph(graph, graph.n);

    // 打印邻接矩阵
    cout << "Adjacency Matrix:" << endl;
    for (int i = 0; i < graph.n; i++)
    {
        for (int j = 0; j < graph.n; j++)
        {
            if (graph.arcs[i][j] == MAX)
                cout << "INF" << " ";
            else
                cout << graph.arcs[i][j] << " ";
        }
        cout << endl;
    }

    // 打印邻接矩阵的顶点信息
    cout << "Graph vertices:\n";
    for (int i = 0; i < graph.n; i++)
    {
        cout << "Vertex " << i << ": " << graph.vexs[i] << endl;
    }

    //计算从每个点到所有其他点的最短路径
    for (int i = 0; i < graph.n; i++)
    {
        dijkstra(graph, i);
    }

   //输入源点ID，打印其余点
    printAllShortestPath(graph);

    //输入源点ID，广度优先打印其余点
    cout << "Imput the source point ID, and the breadth priority prints the rest of the points:" << endl;
    int s; cin >> s;
    BFS(graph, s);

    //这里输入指定目标点ID,计算两点间的最小距离
    printShortestPathDFS(graph);

    return 0;
}
